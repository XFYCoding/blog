import{_ as e,c as r,E as s,B as c,z as n,a as t,O as D,G as a,o as y}from"./chunks/framework.acfd9498.js";const E=JSON.parse('{"title":"Java并发编程基础总结","description":"","frontmatter":{},"headers":[],"relativePath":"articles/1-JAVA系列/3-并发@/1-并发/1-Java并发编程基础总结.md","lastUpdated":1683166839000}'),A={name:"articles/1-JAVA系列/3-并发@/1-并发/1-Java并发编程基础总结.md"},i=n("h1",{id:"java并发编程基础总结",tabindex:"-1"},[t("Java并发编程基础总结 "),n("a",{class:"header-anchor",href:"#java并发编程基础总结","aria-label":'Permalink to "Java并发编程基础总结"'},"​")],-1),C=D(`<h2 id="进程和线程概念" tabindex="-1">进程和线程概念 <a class="header-anchor" href="#进程和线程概念" aria-label="Permalink to &quot;进程和线程概念&quot;">​</a></h2><h3 id="什么进程" tabindex="-1">什么进程 <a class="header-anchor" href="#什么进程" aria-label="Permalink to &quot;什么进程&quot;">​</a></h3><p><strong>进程是系统运行的基本单位</strong>，通俗的理解我们计算机启动的每一个应用程序都是一个进程。如下图所示，在<code>Windows</code>中这一个个<code>exe</code>文件，都是一个进程。而在<code>JVM</code>下，每一个启动的<code>Main</code>方法都可以看作一个进程。</p><p><img src="https://cdn.jsdelivr.net/gh/xfycoding/blogImage/img/202304301346037.png" alt="在这里插入图片描述" data-fancybox="gallery"></p><h3 id="什么是线程" tabindex="-1">什么是线程 <a class="header-anchor" href="#什么是线程" aria-label="Permalink to &quot;什么是线程&quot;">​</a></h3><p>线程是比进程更小的单位，所以在进行线程切换时的开销会远远小于进程，所以线程也常常被称为轻量级进程。每一个进程中都会有一个或者多个线程，在<code>JVM</code>中每一个<code>Java</code>线程都会共享他们的进程的<strong>堆区</strong>和<strong>方法区</strong>。但是每一个进程都会有自己的<strong>程序计数器</strong>、<strong>虚拟机栈</strong>和<strong>本地方法栈</strong>。</p><p><code>Java</code>天生就是一个多线程的程序，我们完全可以运行下面这段代码看看一段<code>main</code>方法中会有那些线程在运行</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MultiThread</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取 Java 线程管理 MXBean</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ThreadMXBean</span><span style="color:#A6ACCD;"> threadMXBean </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ManagementFactory</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getThreadMXBean</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 不需要获取同步的 monitor 和 synchronizer 信息，仅获取线程和线程堆栈信息</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ThreadInfo</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> threadInfos </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> threadMXBean</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dumpAllThreads</span><span style="color:#89DDFF;">(false,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 遍历线程信息，仅打印线程 ID 和线程名称信息</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">ThreadInfo</span><span style="color:#A6ACCD;"> threadInfo </span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> threadInfos</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> threadInfo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getThreadId</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">] </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> threadInfo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getThreadName</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>输出结果如下，所以<code>Java</code>程序在<code>main</code>函数运行时，还有其他的线程再跑。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Monitor</span><span style="color:#A6ACCD;"> Ctrl</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Break </span><span style="color:#676E95;font-style:italic;">//这个线程是IDEA用来监控Ctrl-Break中断信号的线程</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Attach</span><span style="color:#A6ACCD;"> Listener </span><span style="color:#676E95;font-style:italic;">//添加事件</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Signal</span><span style="color:#A6ACCD;"> Dispatcher </span><span style="color:#676E95;font-style:italic;">// 方法处理Jvm信号的线程</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> Finalizer </span><span style="color:#676E95;font-style:italic;">//清除finalize 方法的线程</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Reference</span><span style="color:#A6ACCD;"> Handler </span><span style="color:#676E95;font-style:italic;">// 清除引用的线程</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> main </span><span style="color:#676E95;font-style:italic;">// main入口</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="从jvm角度理解进程和线程的区别" tabindex="-1">从JVM角度理解进程和线程的区别 <a class="header-anchor" href="#从jvm角度理解进程和线程的区别" aria-label="Permalink to &quot;从JVM角度理解进程和线程的区别&quot;">​</a></h2><h3 id="图解两者区别" tabindex="-1">图解两者区别 <a class="header-anchor" href="#图解两者区别" aria-label="Permalink to &quot;图解两者区别&quot;">​</a></h3><p>如下图所示，可以看出线程是比进程更小的单位，进程是独立的，彼此之间不会干扰，但是线程在同一个进程中共享堆区和方法区，虽然开销较小，但是资源之间管理和分配处理相对于进程之间要更加小心。</p><p><img src="https://cdn.jsdelivr.net/gh/xfycoding/blogImage/img/202304301346236.png" alt="在这里插入图片描述" data-fancybox="gallery"></p><h3 id="程序计数器、虚拟机栈、本地方法栈为什么线程中是各自独立的" tabindex="-1">程序计数器、虚拟机栈、本地方法栈为什么线程中是各自独立的 <a class="header-anchor" href="#程序计数器、虚拟机栈、本地方法栈为什么线程中是各自独立的" aria-label="Permalink to &quot;程序计数器、虚拟机栈、本地方法栈为什么线程中是各自独立的&quot;">​</a></h3><ol><li><strong>程序计数器私有的原因</strong>:学过计算机组成原理的小伙伴应该都知晓，程序计数器用于记录当前下一条要执行的指令的单元地址，<code>JVM</code>也一样，有了程序计数器才能保证在多线程的情况下，这个线程被挂起再被恢复时，我们可以根据程序计数器找到下一次要执行的指令的位置。</li><li><strong>虚拟机栈私有的原因</strong>：每一个<code>Java</code>线程在执行方法时，都会创建一个<code>栈帧</code>用于保存<code>局部变量</code>、<code>常量池引用</code>、<code>操作数栈</code>等信息，在这个方法调用到完成前，它对应的信息都会基于栈帧保存在虚拟机栈上。</li><li><strong>本地方法栈私有的原因</strong>:和虚拟机栈类似，只不过本地方法栈保存的<code>native</code>方法的信息。</li></ol><p>所以为了保证局部变量不被别的线程访问到，虚拟机栈和本地方法栈都是私有的，这就是我们解决某些线程安全问题时，常会用到一个叫<strong>栈封闭技术</strong>。</p><p>关于栈封闭技术如下所示，将变量放在局部，每个线程都有自己的虚拟机栈，线程安全</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StackConfinement</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Runnable</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//全部变量 多线操作会有现场问题</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> globalVariable </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">inThread</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//栈封闭技术，将变量放在局部，每个线程都有自己的虚拟机栈 线程安全</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> neverGoOut </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">synchronized</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(this)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10000</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                neverGoOut</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">栈内保护的数字是线程安全的：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> neverGoOut</span><span style="color:#89DDFF;">);</span><span style="color:#676E95;font-style:italic;">//栈内保护的数字是线程安全的：10000</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10000</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            globalVariable</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">inThread</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">InterruptedException</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">StackConfinement</span><span style="color:#A6ACCD;"> r1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">StackConfinement</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Thread</span><span style="color:#A6ACCD;"> thread1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Thread</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">r1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Thread</span><span style="color:#A6ACCD;"> thread2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Thread</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">r1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        thread1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        thread2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        thread1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        thread2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">r1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">globalVariable</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//13257</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h2 id="并发和并行的区别是什么" tabindex="-1">并发和并行的区别是什么？ <a class="header-anchor" href="#并发和并行的区别是什么" aria-label="Permalink to &quot;并发和并行的区别是什么？&quot;">​</a></h2><ol><li><code>并发</code>:并发我们可以理解为，两个线程先后执行，但是从<strong>宏观</strong>角度来看，他们几乎是并行的。</li><li><code>并行</code>:并行我们可以理解为两个线程同一时间都在运行。</li></ol><h2 id="同步和异步是什么意思" tabindex="-1">同步和异步是什么意思？ <a class="header-anchor" href="#同步和异步是什么意思" aria-label="Permalink to &quot;同步和异步是什么意思？&quot;">​</a></h2><ol><li><code>同步</code>:同步就是一个调用没有结果前，不会返回，直到有结果的才返回。</li><li><code>异步</code>:异步即发起一个调用后，不等结果如何直接返回。</li></ol><h2 id="为什么需要多线程-多线程解决了什么问题" tabindex="-1">为什么需要多线程，多线程解决了什么问题 <a class="header-anchor" href="#为什么需要多线程-多线程解决了什么问题" aria-label="Permalink to &quot;为什么需要多线程，多线程解决了什么问题&quot;">​</a></h2><h3 id="从整体角度" tabindex="-1">从整体角度 <a class="header-anchor" href="#从整体角度" aria-label="Permalink to &quot;从整体角度&quot;">​</a></h3><p>因为线程可以被是为轻量级进程，切换开销远远小于进程，所以在多核<code>CPU</code>的计算机下，使用多线程可以更好的利用计算机资源从而提高计算机利用率和效率来应对现如今的高并发网络环境。</p><h3 id="深入计算机底层分析" tabindex="-1">深入计算机底层分析 <a class="header-anchor" href="#深入计算机底层分析" aria-label="Permalink to &quot;深入计算机底层分析&quot;">​</a></h3><p>单核场景下</p><p>在单核CPU情况下，假如一个线程需要进行IO才能执行业务逻辑，若只有单线程，这就意味着IO期间发生阻塞线程却只能干等。假如我们使用多线程的话，在当前线程IO期间，我们可以将其挂起，让出CPU时间片让其他线程工作。</p><p>多核场景</p><p>多核场景我们也不妨举个例子来说明，假如我们有一个很复杂的任务需要进程各种IO和业务计算，假如只有一个线程的话，无论我们有多少个CPU核心，因为单线程的缘故他永远只能利用一个CPU核心，假如我们使用多线程，那么这些线程就会映射到不同的CPU核心上，做到最好的利用计算机资源，提高执行效率，执行事件约为单线程执行事件/CPU核心数。</p><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h2><h3 id="继承thread-实现多线程" tabindex="-1">继承Thread 实现多线程 <a class="header-anchor" href="#继承thread-实现多线程" aria-label="Permalink to &quot;继承Thread 实现多线程&quot;">​</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//继承Thread 然后start</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Task</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Thread</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">60</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">++)</span></span>
<span class="line"><span style="color:#A6ACCD;">            System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Task run----</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">InterruptedException</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Task</span><span style="color:#A6ACCD;"> d </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Task</span><span style="color:#89DDFF;">();</span><span style="color:#676E95;font-style:italic;">//创建好一个线程。</span></span>
<span class="line"><span style="color:#A6ACCD;">        d</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">();</span><span style="color:#676E95;font-style:italic;">//开启线程并执行该线程的run方法。</span></span>
<span class="line"><span style="color:#A6ACCD;">        d</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="runable接口实现多线程" tabindex="-1"><strong>Runable接口实现多线程</strong> <a class="header-anchor" href="#runable接口实现多线程" aria-label="Permalink to &quot;**Runable接口实现多线程**&quot;">​</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//实现Runnable 方法</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Ticket</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Runnable</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> tick </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">synchronized</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Ticket</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(true)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">tick </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currentThread</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">....sale : </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> tick</span><span style="color:#89DDFF;">--);</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Ticket</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Runnable</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> tick </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">synchronized</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Ticket</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(true)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">tick </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currentThread</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">....sale : </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> tick</span><span style="color:#89DDFF;">--);</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h3 id="futuretask-callable" tabindex="-1">FutureTask+Callable <a class="header-anchor" href="#futuretask-callable" aria-label="Permalink to &quot;FutureTask+Callable&quot;">​</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">FutureTask</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> futureTask </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">FutureTask</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">123</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Thread</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">futureTask</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">futureTask</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Exception</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">printStackTrace</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="为什么需要runnable接口实现多线程" tabindex="-1">为什么需要Runnable接口实现多线程 <a class="header-anchor" href="#为什么需要runnable接口实现多线程" aria-label="Permalink to &quot;为什么需要Runnable接口实现多线程&quot;">​</a></h2><p>由于<code>Java</code>的类只能单继承，当一个类已有继承类时，某个函数需要扩展为多线程这时候，<code>Runnable</code>接口就是最好的解决方案。</p><h2 id="thread和runnable使用的区别" tabindex="-1">Thread和Runnable使用的区别 <a class="header-anchor" href="#thread和runnable使用的区别" aria-label="Permalink to &quot;Thread和Runnable使用的区别&quot;">​</a></h2><p><strong>继承Thread</strong>：线程代码存放在<code>Thread</code>子类的<code>run</code>方法中，调用start()即可实现调用。 <strong>Runnable</strong>：线程代码存在接口子类的<code>run</code>方法中，需要实例化一个线程对象<code>Thread</code>并将其作为参数传入，才能调用到<code>run</code>方法。</p><h2 id="的区别" tabindex="-1">的区别 <a class="header-anchor" href="#的区别" aria-label="Permalink to &quot;的区别&quot;">​</a></h2><p><strong>run</strong>:仅仅是方法，在线程实例化之后使用<code>run</code>等于一个普通对象的直接调用。 <strong>start</strong>：开启了线程并执行线程中的<code>run</code>方法，这期间程序才真正执行从<strong>用户态到内核态</strong>，创建线程的动作。</p><h2 id="线程生命周期详解" tabindex="-1">线程生命周期详解 <a class="header-anchor" href="#线程生命周期详解" aria-label="Permalink to &quot;线程生命周期详解&quot;">​</a></h2><h3 id="-1" tabindex="-1"><a class="header-anchor" href="#-1" aria-label="Permalink to &quot;&quot;">​</a></h3><p><strong>新建(NEW)</strong>:新创建的了一个线程对象，该对象并没有调用<code>start()</code>。 <strong>可运行(RUNNABLE)</strong>：线程对象创建后，并调用了<code>start</code>方法，等待分配<code>CPU</code>时间执行代码逻辑。 <strong>阻塞(BLOCKED)</strong>:阻塞状态，等待锁的释放。当线程在<code>synchronized</code> 中被<code>wait</code>，然后再被唤醒时，若<code>synchronized</code> 有其他线程在执行，那么它就会进入<code>BLOCKED</code>状态。 <strong>等待(WAITING)</strong>：因为某些原因被挂起，等待其他线程通知或者唤醒。 <strong>超时等待(TIME_WAITING)</strong>:等待时间后自行返回，而不像<code>WAITING</code>那样没有通知就一直等待。 <strong>终止(TERMINATED)</strong>：该线程执行完毕，终止状态了。</p><h3 id="和操作系统的线程状态的区别" tabindex="-1">和操作系统的线程状态的区别 <a class="header-anchor" href="#和操作系统的线程状态的区别" aria-label="Permalink to &quot;和操作系统的线程状态的区别&quot;">​</a></h3><p>如下图所示，实际上操作系统层面可将<code>RUNNABLE</code>分为<code>Running</code>以及<code>Ready</code>，<code>Java</code>设计者之所以没有区分那么细是因为现代计算机执行效率非常高，这两个状态在宏观角度几乎无法感知。现代操作系统对多线程采用时间分片的抢占式调度算法，使得每个线程得到<code>CPU</code>在<code>10-20ms</code> 处于运行状态，然后在让出<code>CPU</code>时间片，在不久后又会被调度执行，所以对于这种微观状态区别，<code>Java</code>设计者认为没有必要为了这么一瞬间进行这么多的状态划分。</p><p><img src="https://cdn.jsdelivr.net/gh/xfycoding/blogImage/img/202304301346185.png" alt="在这里插入图片描述" data-fancybox="gallery"></p><h2 id="什么是上下文切换" tabindex="-1">什么是上下文切换 <a class="header-anchor" href="#什么是上下文切换" aria-label="Permalink to &quot;什么是上下文切换&quot;">​</a></h2><p>线程在执行过程中都会有自己的运行条件和状态，这些运行条件和状态我们就称之为线程上下文，这些信息例如<strong>程序计数器</strong>、<strong>虚拟机栈</strong>、<strong>本地方法栈</strong>等信息。当出现以下几种情况的时候就会从占用<code>CPU</code>状态中退出:</p><ol><li>线程主动让出<code>CPU</code>，例如调用<code>wait</code>或者<code>sleep</code>等方法。</li><li>线程的CPU <strong>时间片用完</strong> 而退出<code>CPU</code>占用状态 <code>(因为操作系统为了避免某些线程独占CPU导致其他线程饥饿的情况就设定的例如时间分片算法)</code>。</li><li>线程调用了阻塞类型的系统中断，例如<code>IO</code>请求等。</li><li>线程被终止或者结束运行。</li></ol><p>上述的前三种情况都会发生上下文切换。为了保证线程被切换在恢复时能够继续执行，所以上下文切换都需要保存线程当前执行的信息，并恢复下一个要执行线程的现场。这种操作就会占用<code>CPU</code>和内存资源，频繁的进行上下文切换就会导致整体效率低下。</p><h2 id="线程死锁问题" tabindex="-1">线程死锁问题 <a class="header-anchor" href="#线程死锁问题" aria-label="Permalink to &quot;线程死锁问题&quot;">​</a></h2><p>如下图所示，两个线程各自持有一把锁，必须拿到对方手中那把锁才能释放自己的锁，正是这样一种双方僵持的状态就会导致线程死锁问题。</p><p><img src="https://cdn.jsdelivr.net/gh/xfycoding/blogImage/img/202304301346935.png" alt="在这里插入图片描述" data-fancybox="gallery"></p><p>翻译称代码就如下图所示</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DeadLockDemo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> lock1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">final</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> lock2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Thread</span><span style="color:#89DDFF;">(()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">synchronized</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">lock1</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">                System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">线程1获得锁1，准备获取锁2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                    Thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2000</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">InterruptedException</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                    e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">printStackTrace</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#C792EA;">synchronized</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">lock2</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">                    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">线程1获得锁2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}).</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Thread</span><span style="color:#89DDFF;">(()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">synchronized</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">lock2</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">                System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">线程2获得锁2，准备获取锁1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                    Thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2000</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">InterruptedException</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                    e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">printStackTrace</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#C792EA;">synchronized</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">lock1</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">                    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">线程2获得锁1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}).</span><span style="color:#82AAFF;">start</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><p>输出结果</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">线程1获得锁1，准备获取锁2</span></span>
<span class="line"><span style="color:#A6ACCD;">线程2获得锁2，准备获取锁1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>符合以下4个条件的场景就会发生死锁问题:</p><ol><li><strong>互斥</strong>:一个资源任意时间只能被一个线程获取。</li><li><strong>请求与保持条件</strong>:一个线程拿到资源后，在获取其他资源而进入阻塞期间，不会释放已有资源。</li><li><strong>不可剥夺条件</strong>:该资源被线程使用时，其他线程无法剥夺该线程使用权，除非这个线程主动释放。</li><li><strong>循环等待条件</strong>:若干线程获取资源时，取锁的流程构成一个头尾相接的环，如上图。</li></ol><p>预防死锁的3种方式</p><ol><li><strong>破坏请求与保持条件</strong>:以上面代码为例，我们要求所有线程必须一次性获得两个锁才能进行业务处理。即要求线程一次性获得所有资源才能进行逻辑处理。</li><li><strong>破坏不可剥夺</strong>:资源被其他线程获取时，我们可以强行剥夺使用权。</li><li><strong>破坏循环等待</strong>:这个就比较巧妙了，例如我们上面lock1 id为1，lock2id为2，我们让每个线程取锁时都按照lock的id顺序取锁，这样就避免构成循环队列。</li><li><strong>操作系统思想(银行家算法)</strong>:这个就涉及到操作系统知识了，大抵的意思是在取锁之前对资源分配进行评估，如果在给定资源情况下不能完成业务逻辑，那么就避免这个线程取锁，感兴趣的读者可以阅读笔者之前写过的这篇文章： <a href="https://blog.csdn.net/shark_chili3007/article/details/123026552" target="_blank" rel="noreferrer">操作系统-死锁(opens new window)</a></li></ol><h2 id="sleep和wait方法区别" tabindex="-1">sleep和wait方法区别 <a class="header-anchor" href="#sleep和wait方法区别" aria-label="Permalink to &quot;sleep和wait方法区别&quot;">​</a></h2><ol><li><code>sleep</code>不会释放锁，只是单纯休眠一会。而<code>wait</code>则会释放锁。</li><li><code>sleep</code>单纯让线程休眠，在给定时间后就会苏醒，而<code>wait</code>若没有设定时间的话，只能通过<code>notify</code>或者<code>notifyAll</code>唤醒。</li><li><code>sleep</code>是<code>Thread</code> 的方法，而<code>wait</code>是<code>Object</code> 的方法</li><li><code>wait</code>常用于线程之间的通信或者交互，而<code>sleep</code>单纯让线程让出执行权。</li></ol><h2 id="为什么sleep会定义在thread" tabindex="-1">为什么sleep会定义在Thread <a class="header-anchor" href="#为什么sleep会定义在thread" aria-label="Permalink to &quot;为什么sleep会定义在Thread&quot;">​</a></h2><p>因为<code>sleep</code>要做的仅仅是让线程休眠，所以不涉及任何锁释放等逻辑，放在<code>Thread</code>上最合适。</p><h2 id="为什么wait会定义在object-上" tabindex="-1">为什么wait会定义在Object 上 <a class="header-anchor" href="#为什么wait会定义在object-上" aria-label="Permalink to &quot;为什么wait会定义在Object 上&quot;">​</a></h2><p>我们都知道使用<code>wait</code>时就会释放锁，并让对象进入<code>WAITING</code> 状态，会涉及到资源释放等问题，所以我们需要将<code>wait</code>放在<code>Object</code> 类上。</p><h2 id="可以直接调用-thread-类的-run-方法吗" tabindex="-1">可以直接调用 Thread 类的 run 方法吗？ <a class="header-anchor" href="#可以直接调用-thread-类的-run-方法吗" aria-label="Permalink to &quot;可以直接调用 Thread 类的 run 方法吗？&quot;">​</a></h2><p>若我们编写run方法，然后调用<code>Thread</code> 的<code>start</code>方法，线程就会从用户态转内核态创建线程，并在获取<code>CPU</code>时间片的时候开始运行，然后运行<code>run</code>方法。 若直接调用<code>run</code>方法，那么该方法和普通方法没有任何差别，它仅仅是一个名字为<code>run</code>的普通方法。</p><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><p><a href="https://www.cnblogs.com/dolphin0520/p/3920373.html" target="_blank" rel="noreferrer">Java并发编程：volatile关键字解析(opens new window)</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzk0MjE3NDE0Ng==&amp;mid=2247491549&amp;idx=1&amp;sn=1d5728754e8c06a621bbdca336d85452&amp;chksm=c2c66570f5b1ec66df623e5300084257bd943b134d34e16abaacdb58834702dbbc4599868b89&amp;scene=178&amp;cur_album_id=1703494881072955395#rd" target="_blank" rel="noreferrer">图解 | 你管这破玩意叫线程池？ (opens new window)</a></p><p><a href="https://mp.weixin.qq.com/s/IkNfuE541Mqqbv2iLIhMRQ" target="_blank" rel="noreferrer">我是一个线程(opens new window)</a></p><p><a href="https://javaguide.cn/java/concurrent/java-concurrent-questions-01.html#%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B" target="_blank" rel="noreferrer">Java 并发常见面试题总结（上）(opens new window)</a></p><p>[创建线程几种方式_线程创建的四种方式及其区别](<a href="https://cloud.tencent.com/developer/article/2135189#:~:text=%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%9A" target="_blank" rel="noreferrer">https://cloud.tencent.com/developer/article/2135189#:~:text=创建线程的几种方式：</a> 方式1：通过继承Thread类创建线程 步骤：1.定义Thread类的子类，并重写该类的run方法，该方法的方法体就是线程需要执行的任务，因此run,()方法也被称为线程执行体 2.创建Thread子类的实例，也就是创建了线程对象 3.启动线程，即调用线程的start ()方法)</p>`,79);function F(l,b,d,u,m,h){const p=a("ArticlesMetadata"),o=a("ClientOnly");return y(),r("div",null,[i,s(o,null,{default:c(()=>[s(p,{article:l.$frontmatter},null,8,["article"])]),_:1}),C])}const f=e(A,[["render",F]]);export{E as __pageData,f as default};
