import{_ as o,c as p,E as s,B as c,z as a,a as r,R as i,G as n,o as d}from"./chunks/framework.e093bc19.js";const _=JSON.parse('{"title":"Class 文件结构","description":"","frontmatter":{},"headers":[],"relativePath":"articles/1-JAVA系列/4-JVM@/1-JVM知识点/1-Class 文件结构.md","filePath":"articles/1-JAVA系列/4-JVM@/1-JVM知识点/1-Class 文件结构.md","lastUpdated":1683818268000}'),y={name:"articles/1-JAVA系列/4-JVM@/1-JVM知识点/1-Class 文件结构.md"},u=a("h1",{id:"class-文件结构",tabindex:"-1"},[r("Class 文件结构 "),a("a",{class:"header-anchor",href:"#class-文件结构","aria-label":'Permalink to "Class 文件结构"'},"​")],-1),g=i(`<h2 id="回顾一下字节码" tabindex="-1">回顾一下字节码 <a class="header-anchor" href="#回顾一下字节码" aria-label="Permalink to &quot;回顾一下字节码&quot;">​</a></h2><p>在 Java 中，JVM 可以理解的代码就叫做<code>字节码</code>（即扩展名为 <code>.class</code> 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Java 程序无须重新编译便可在多种不同操作系统的计算机上运行。</p><p>Clojure（Lisp 语言的一种方言）、Groovy、Scala 等语言都是运行在 Java 虚拟机之上。下图展示了不同的语言被不同的编译器编译成<code>.class</code>文件最终运行在 Java 虚拟机之上。<code>.class</code>文件的二进制格式可以使用 <a href="https://www.x-ways.net/winhex/" target="_blank" rel="noreferrer">WinHex</a> 查看。</p><p><img src="https://cdn.jsdelivr.net/gh/xfycoding/blogImage/img/202305041726494.png" alt="java虚拟机" data-fancybox="gallery"></p><p>可以说<code>.class</code>文件是不同的语言在 Java 虚拟机之间的重要桥梁，同时也是支持 Java 跨平台很重要的一个原因。</p><h2 id="class-文件结构总结" tabindex="-1">Class 文件结构总结 <a class="header-anchor" href="#class-文件结构总结" aria-label="Permalink to &quot;Class 文件结构总结&quot;">​</a></h2><p>根据 Java 虚拟机规范，Class 文件通过 <code>ClassFile</code> 定义，有点类似 C 语言的结构体。</p><p><code>ClassFile</code> 的结构如下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">ClassFile </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    u4             magic</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//Class 文件的标志</span></span>
<span class="line"><span style="color:#A6ACCD;">    u2             minor_version</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//Class 的小版本号</span></span>
<span class="line"><span style="color:#A6ACCD;">    u2             major_version</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//Class 的大版本号</span></span>
<span class="line"><span style="color:#A6ACCD;">    u2             constant_pool_count</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//常量池的数量</span></span>
<span class="line"><span style="color:#A6ACCD;">    cp_info        constant_pool</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">constant_pool_count</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">];</span><span style="color:#676E95;font-style:italic;">//常量池</span></span>
<span class="line"><span style="color:#A6ACCD;">    u2             access_flags</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//Class 的访问标记</span></span>
<span class="line"><span style="color:#A6ACCD;">    u2             this_class</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//当前类</span></span>
<span class="line"><span style="color:#A6ACCD;">    u2             super_class</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//父类</span></span>
<span class="line"><span style="color:#A6ACCD;">    u2             interfaces_count</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//接口</span></span>
<span class="line"><span style="color:#A6ACCD;">    u2             interfaces</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">interfaces_count</span><span style="color:#89DDFF;">];</span><span style="color:#676E95;font-style:italic;">//一个类可以实现多个接口</span></span>
<span class="line"><span style="color:#A6ACCD;">    u2             fields_count</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//Class 文件的字段属性</span></span>
<span class="line"><span style="color:#A6ACCD;">    field_info     fields</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">fields_count</span><span style="color:#89DDFF;">];</span><span style="color:#676E95;font-style:italic;">//一个类可以有多个字段</span></span>
<span class="line"><span style="color:#A6ACCD;">    u2             methods_count</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//Class 文件的方法数量</span></span>
<span class="line"><span style="color:#A6ACCD;">    method_info    methods</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">methods_count</span><span style="color:#89DDFF;">];</span><span style="color:#676E95;font-style:italic;">//一个类可以有个多个方法</span></span>
<span class="line"><span style="color:#A6ACCD;">    u2             attributes_count</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//此类的属性表中的属性数</span></span>
<span class="line"><span style="color:#A6ACCD;">    attribute_info attributes</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">attributes_count</span><span style="color:#89DDFF;">];</span><span style="color:#676E95;font-style:italic;">//属性表集合</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>通过分析 <code>ClassFile</code> 的内容，我们便可以知道 class 文件的组成。</p><p><img src="https://cdn.jsdelivr.net/gh/xfycoding/blogImage/img/202305041727891.jpeg" alt="ClassFile 内容分析" data-fancybox="gallery"></p><p>下面这张图是通过 IDEA 插件 <code>jclasslib</code> 查看的，你可以更直观看到 Class 文件结构。</p><p><img src="https://cdn.jsdelivr.net/gh/xfycoding/blogImage/img/202305041727670.png" alt="" data-fancybox="gallery"></p><p>使用 <code>jclasslib</code> 不光可以直观地查看某个类对应的字节码文件，还可以查看类的基本信息、常量池、接口、属性、函数等信息。</p><p>下面详细介绍一下 Class 文件结构涉及到的一些组件。</p><h3 id="魔数-magic-number" tabindex="-1">魔数（Magic Number） <a class="header-anchor" href="#魔数-magic-number" aria-label="Permalink to &quot;魔数（Magic Number）&quot;">​</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">u4             magic</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//Class 文件的标志</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>每个 Class 文件的头 4 个字节称为魔数（Magic Number）,它的唯一作用是<strong>确定这个文件是否为一个能被虚拟机接收的 Class 文件</strong>。</p><p>程序设计者很多时候都喜欢用一些特殊的数字表示固定的文件类型或者其它特殊的含义。</p><h3 id="class-文件版本号-minor-major-version" tabindex="-1">Class 文件版本号（Minor&amp;Major Version） <a class="header-anchor" href="#class-文件版本号-minor-major-version" aria-label="Permalink to &quot;Class 文件版本号（Minor&amp;Major Version）&quot;">​</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">u2             minor_version</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//Class 的小版本号</span></span>
<span class="line"><span style="color:#A6ACCD;">    u2             major_version</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//Class 的大版本号</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>紧接着魔数的四个字节存储的是 Class 文件的版本号：第 5 和第 6 位是<strong>次版本号</strong>，第 7 和第 8 位是<strong>主版本号</strong>。</p><p>每当 Java 发布大版本（比如 Java 8，Java9）的时候，主版本号都会加 1。你可以使用 <code>javap -v</code> 命令来快速查看 Class 文件的版本号信息。</p><p>高版本的 Java 虚拟机可以执行低版本编译器生成的 Class 文件，但是低版本的 Java 虚拟机不能执行高版本编译器生成的 Class 文件。所以，我们在实际开发的时候要确保开发的的 JDK 版本和生产环境的 JDK 版本保持一致。</p><h3 id="常量池-constant-pool" tabindex="-1">常量池（Constant Pool） <a class="header-anchor" href="#常量池-constant-pool" aria-label="Permalink to &quot;常量池（Constant Pool）&quot;">​</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">u2             constant_pool_count</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//常量池的数量</span></span>
<span class="line"><span style="color:#A6ACCD;">    cp_info        constant_pool</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">constant_pool_count</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">];</span><span style="color:#676E95;font-style:italic;">//常量池</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>紧接着主次版本号之后的是常量池，常量池的数量是 <code>constant_pool_count-1</code>（<strong>常量池计数器是从 1 开始计数的，将第 0 项常量空出来是有特殊考虑的，索引值为 0 代表“不引用任何一个常量池项”</strong>）。</p><p>常量池主要存放两大常量：字面量和符号引用。字面量比较接近于 Java 语言层面的的常量概念，如文本字符串、声明为 final 的常量值等。而符号引用则属于编译原理方面的概念。包括下面三类常量：</p><ul><li>类和接口的全限定名</li><li>字段的名称和描述符</li><li>方法的名称和描述符</li></ul><p>常量池中每一项常量都是一个表，这 14 种表有一个共同的特点：<strong>开始的第一位是一个 u1 类型的标志位 -tag 来标识常量的类型，代表当前这个常量属于哪种常量类型．</strong></p><table><thead><tr><th style="text-align:center;">类型</th><th style="text-align:center;">标志（tag）</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">CONSTANT_utf8_info</td><td style="text-align:center;">1</td><td style="text-align:center;">UTF-8 编码的字符串</td></tr><tr><td style="text-align:center;">CONSTANT_Integer_info</td><td style="text-align:center;">3</td><td style="text-align:center;">整形字面量</td></tr><tr><td style="text-align:center;">CONSTANT_Float_info</td><td style="text-align:center;">4</td><td style="text-align:center;">浮点型字面量</td></tr><tr><td style="text-align:center;">CONSTANT_Long_info</td><td style="text-align:center;">５</td><td style="text-align:center;">长整型字面量</td></tr><tr><td style="text-align:center;">CONSTANT_Double_info</td><td style="text-align:center;">６</td><td style="text-align:center;">双精度浮点型字面量</td></tr><tr><td style="text-align:center;">CONSTANT_Class_info</td><td style="text-align:center;">７</td><td style="text-align:center;">类或接口的符号引用</td></tr><tr><td style="text-align:center;">CONSTANT_String_info</td><td style="text-align:center;">８</td><td style="text-align:center;">字符串类型字面量</td></tr><tr><td style="text-align:center;">CONSTANT_Fieldref_info</td><td style="text-align:center;">９</td><td style="text-align:center;">字段的符号引用</td></tr><tr><td style="text-align:center;">CONSTANT_Methodref_info</td><td style="text-align:center;">10</td><td style="text-align:center;">类中方法的符号引用</td></tr><tr><td style="text-align:center;">CONSTANT_InterfaceMethodref_info</td><td style="text-align:center;">11</td><td style="text-align:center;">接口中方法的符号引用</td></tr><tr><td style="text-align:center;">CONSTANT_NameAndType_info</td><td style="text-align:center;">12</td><td style="text-align:center;">字段或方法的符号引用</td></tr><tr><td style="text-align:center;">CONSTANT_MothodType_info</td><td style="text-align:center;">16</td><td style="text-align:center;">标志方法类型</td></tr><tr><td style="text-align:center;">CONSTANT_MethodHandle_info</td><td style="text-align:center;">15</td><td style="text-align:center;">表示方法句柄</td></tr><tr><td style="text-align:center;">CONSTANT_InvokeDynamic_info</td><td style="text-align:center;">18</td><td style="text-align:center;">表示一个动态方法调用点</td></tr></tbody></table><p><code>.class</code> 文件可以通过<code>javap -v class类名</code> 指令来看一下其常量池中的信息(<code>javap -v class类名-&gt; temp.txt</code> ：将结果输出到 temp.txt 文件)。</p><h3 id="访问标志-access-flags" tabindex="-1">访问标志(Access Flags) <a class="header-anchor" href="#访问标志-access-flags" aria-label="Permalink to &quot;访问标志(Access Flags)&quot;">​</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">u2             access_flags</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//Class 的访问标记</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在常量池结束之后，紧接着的两个字节代表访问标志，这个标志用于识别一些类或者接口层次的访问信息，包括：这个 Class 是类还是接口，是否为 <code>public</code> 或者 <code>abstract</code> 类型，如果是类的话是否声明为 <code>final</code> 等等。</p><p>类访问和属性修饰符:</p><p><img src="https://cdn.jsdelivr.net/gh/xfycoding/blogImage/img/202305041727961.png" alt="类访问和属性修饰符" data-fancybox="gallery"></p><p>我们定义了一个 <code>Employee</code> 类</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">top</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">snailclimb</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">bean</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Employee</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>通过<code>javap -v class类名</code> 指令来看一下类的访问标志。</p><p><img src="https://cdn.jsdelivr.net/gh/xfycoding/blogImage/img/202305041727327.png" alt="查看类的访问标志" data-fancybox="gallery"></p><h3 id="当前类-this-class-、父类-super-class-、接口-interfaces-索引集合" tabindex="-1">当前类（This Class）、父类（Super Class）、接口（Interfaces）索引集合 <a class="header-anchor" href="#当前类-this-class-、父类-super-class-、接口-interfaces-索引集合" aria-label="Permalink to &quot;当前类（This Class）、父类（Super Class）、接口（Interfaces）索引集合&quot;">​</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">u2             this_class</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//当前类</span></span>
<span class="line"><span style="color:#A6ACCD;">    u2             super_class</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//父类</span></span>
<span class="line"><span style="color:#A6ACCD;">    u2             interfaces_count</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//接口</span></span>
<span class="line"><span style="color:#A6ACCD;">    u2             interfaces</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">interfaces_count</span><span style="color:#89DDFF;">];</span><span style="color:#676E95;font-style:italic;">//一个类可以实现多个接口</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Java 类的继承关系由类索引、父类索引和接口索引集合三项确定。类索引、父类索引和接口索引集合按照顺序排在访问标志之后，</p><p>类索引用于确定这个类的全限定名，父类索引用于确定这个类的父类的全限定名，由于 Java 语言的单继承，所以父类索引只有一个，除了 <code>java.lang.Object</code> 之外，所有的 Java 类都有父类，因此除了 <code>java.lang.Object</code> 外，所有 Java 类的父类索引都不为 0。</p><p>接口索引集合用来描述这个类实现了那些接口，这些被实现的接口将按 <code>implements</code> (如果这个类本身是接口的话则是<code>extends</code>) 后的接口顺序从左到右排列在接口索引集合中。</p><h3 id="字段表集合-fields" tabindex="-1">字段表集合（Fields） <a class="header-anchor" href="#字段表集合-fields" aria-label="Permalink to &quot;字段表集合（Fields）&quot;">​</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">u2             fields_count</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//Class 文件的字段的个数</span></span>
<span class="line"><span style="color:#A6ACCD;">    field_info     fields</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">fields_count</span><span style="color:#89DDFF;">];</span><span style="color:#676E95;font-style:italic;">//一个类会可以有个字段</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>字段表（field info）用于描述接口或类中声明的变量。字段包括类级变量以及实例变量，但不包括在方法内部声明的局部变量。</p><p><strong>field info(字段表) 的结构:</strong></p><p><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/2019-6/%E5%AD%97%E6%AE%B5%E8%A1%A8%E7%9A%84%E7%BB%93%E6%9E%84.png" alt="字段表的结构 " data-fancybox="gallery"></p><ul><li><strong>access_flags:</strong> 字段的作用域（<code>public</code> ,<code>private</code>,<code>protected</code>修饰符），是实例变量还是类变量（<code>static</code>修饰符）,可否被序列化（transient 修饰符）,可变性（final）,可见性（volatile 修饰符，是否强制从主内存读写）。</li><li><strong>name_index:</strong> 对常量池的引用，表示的字段的名称；</li><li><strong>descriptor_index:</strong> 对常量池的引用，表示字段和方法的描述符；</li><li><strong>attributes_count:</strong> 一个字段还会拥有一些额外的属性，attributes_count 存放属性的个数；</li><li><strong>attributes[attributes_count]:</strong> 存放具体属性具体内容。</li></ul><p>上述这些信息中，各个修饰符都是布尔值，要么有某个修饰符，要么没有，很适合使用标志位来表示。而字段叫什么名字、字段被定义为什么数据类型这些都是无法固定的，只能引用常量池中常量来描述。</p><p><strong>字段的 access_flag 的取值:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/xfycoding/blogImage/img/202305041727102.png" alt="字段的 access_flag 的取值" data-fancybox="gallery"></p><h3 id="方法表集合-methods" tabindex="-1">方法表集合（Methods） <a class="header-anchor" href="#方法表集合-methods" aria-label="Permalink to &quot;方法表集合（Methods）&quot;">​</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">u2             methods_count</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//Class 文件的方法的数量</span></span>
<span class="line"><span style="color:#A6ACCD;">    method_info    methods</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">methods_count</span><span style="color:#89DDFF;">];</span><span style="color:#676E95;font-style:italic;">//一个类可以有个多个方法</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>methods_count 表示方法的数量，而 method_info 表示方法表。</p><p>Class 文件存储格式中对方法的描述与对字段的描述几乎采用了完全一致的方式。方法表的结构如同字段表一样，依次包括了访问标志、名称索引、描述符索引、属性表集合几项。</p><p><strong>method_info(方法表的) 结构:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/xfycoding/blogImage/img/202305041727690.png" alt="方法表的结构" data-fancybox="gallery"></p><p><strong>方法表的 access_flag 取值：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/xfycoding/blogImage/img/202305041727589.png" alt="方法表的 access_flag 取值" data-fancybox="gallery"></p><p>注意：因为<code>volatile</code>修饰符和<code>transient</code>修饰符不可以修饰方法，所以方法表的访问标志中没有这两个对应的标志，但是增加了<code>synchronized</code>、<code>native</code>、<code>abstract</code>等关键字修饰方法，所以也就多了这些关键字对应的标志。</p><h3 id="属性表集合-attributes" tabindex="-1">属性表集合（Attributes） <a class="header-anchor" href="#属性表集合-attributes" aria-label="Permalink to &quot;属性表集合（Attributes）&quot;">​</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">u2             attributes_count</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//此类的属性表中的属性数</span></span>
<span class="line"><span style="color:#A6ACCD;">   attribute_info attributes</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">attributes_count</span><span style="color:#89DDFF;">];</span><span style="color:#676E95;font-style:italic;">//属性表集合</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在 Class 文件，字段表，方法表中都可以携带自己的属性表集合，以用于描述某些场景专有的信息。与 Class 文件中其它的数据项目要求的顺序、长度和内容不同，属性表集合的限制稍微宽松一些，不再要求各个属性表具有严格的顺序，并且只要不与已有的属性名重复，任何人实现的编译器都可以向属性表中写 入自己定义的属性信息，Java 虚拟机运行时会忽略掉它不认识的属性。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li>《实战 Java 虚拟机》</li><li>Chapter 4. The class File Format - Java Virtual Machine Specification:<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html" target="_blank" rel="noreferrer">https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html</a></li><li>实例分析JAVA CLASS的文件结构：<a href="https://coolshell.cn/articles/9229.html" target="_blank" rel="noreferrer">https://coolshell.cn/articles/9229.html</a></li><li>《Java虚拟机原理图解》 1.2.2、Class文件中的常量池详解（上）：<a href="https://blog.csdn.net/luanlouis/article/details/39960815" target="_blank" rel="noreferrer">https://blog.csdn.net/luanlouis/article/details/39960815</a></li></ul>`,69);function C(e,b,m,h,D,f){const l=n("ArticlesMetadata"),t=n("ClientOnly");return d(),p("div",null,[u,s(t,null,{default:c(()=>[s(l,{article:e.$frontmatter},null,8,["article"])]),_:1}),g])}const v=o(y,[["render",C]]);export{_ as __pageData,v as default};
